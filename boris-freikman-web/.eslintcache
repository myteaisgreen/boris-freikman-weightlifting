[{"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\index.js":"1","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\App.js":"2","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\reportWebVitals.js":"3","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\ForgotPassword.js":"4","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Home.js":"5","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Login.js":"6","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Navbar.js":"7","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\AdminBoard.js":"8","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Profile.js":"9","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\auth.service.js":"10","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\UserBoard.js":"11","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\themes\\index.js":"12","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\user.service.js":"13","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\ProfileListItem.js":"14","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\EditProfile.js":"15","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\EditUserFromParams.jsx":"16","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\RegisterProfile.jsx":"17","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\Exercises.jsx":"18","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminWorkout.jsx":"19","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\AddExercise.jsx":"20","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminActiveWorkouts.jsx":"21","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkout.jsx":"22","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\UserCurrentWorkout.jsx":"23","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\UserPreviousWorkouts.jsx":"24","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminPreviousWorkouts.jsx":"25","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\auth-header.js":"26","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\admin.service.js":"27","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\WorkoutExercises.jsx":"28","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\ExercisesListItem.jsx":"29","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\WorkoutsListItem.jsx":"30","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutAddAthletes.jsx":"31","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutDateTimePicker.jsx":"32","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutAddExercises.jsx":"33","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\EditExerciseFormDialog.jsx":"34","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\DeleteExerciseFormDialog.jsx":"35","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\PickExerciseAndSets.jsx":"36","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\PercentageOfExerciseSelector.jsx":"37","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddSets.jsx":"38","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\ExerciseSelector.jsx":"39","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\AlertSnackbar.jsx":"40","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\SelectMenu.jsx":"41","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\RegularMenu.jsx":"42","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\athletes\\Athletes.jsx":"43","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\athletes\\AthletesListItem.jsx":"44"},{"size":543,"mtime":1609085838098,"results":"45","hashOfConfig":"46"},{"size":2032,"mtime":1618660594643,"results":"47","hashOfConfig":"46"},{"size":362,"mtime":499162500000,"results":"48","hashOfConfig":"46"},{"size":1469,"mtime":1612369246618,"results":"49","hashOfConfig":"46"},{"size":381,"mtime":1618674405989,"results":"50","hashOfConfig":"46"},{"size":4832,"mtime":1617789890846,"results":"51","hashOfConfig":"46"},{"size":2021,"mtime":1618752246464,"results":"52","hashOfConfig":"46"},{"size":3363,"mtime":1618755257143,"results":"53","hashOfConfig":"46"},{"size":2199,"mtime":1617785938859,"results":"54","hashOfConfig":"46"},{"size":620,"mtime":1618672605623,"results":"55","hashOfConfig":"46"},{"size":2068,"mtime":1618752345899,"results":"56","hashOfConfig":"46"},{"size":244,"mtime":1618673979644,"results":"57","hashOfConfig":"46"},{"size":751,"mtime":1618672038134,"results":"58","hashOfConfig":"46"},{"size":502,"mtime":1612369223049,"results":"59","hashOfConfig":"46"},{"size":6187,"mtime":1618671371160,"results":"60","hashOfConfig":"46"},{"size":825,"mtime":1616344626744,"results":"61","hashOfConfig":"46"},{"size":6748,"mtime":1618656392892,"results":"62","hashOfConfig":"46"},{"size":2800,"mtime":1618756819960,"results":"63","hashOfConfig":"46"},{"size":1662,"mtime":1617298109299,"results":"64","hashOfConfig":"46"},{"size":2997,"mtime":1618656383595,"results":"65","hashOfConfig":"46"},{"size":989,"mtime":1617700490794,"results":"66","hashOfConfig":"46"},{"size":3671,"mtime":1618762369781,"results":"67","hashOfConfig":"46"},{"size":1640,"mtime":1618672508523,"results":"68","hashOfConfig":"46"},{"size":1321,"mtime":1618672125543,"results":"69","hashOfConfig":"46"},{"size":1001,"mtime":1617700531128,"results":"70","hashOfConfig":"46"},{"size":241,"mtime":1618570134809,"results":"71","hashOfConfig":"46"},{"size":2317,"mtime":1618755557600,"results":"72","hashOfConfig":"46"},{"size":1557,"mtime":1617785836608,"results":"73","hashOfConfig":"46"},{"size":2140,"mtime":1618757076290,"results":"74","hashOfConfig":"46"},{"size":942,"mtime":1617700369760,"results":"75","hashOfConfig":"46"},{"size":5740,"mtime":1618762433210,"results":"76","hashOfConfig":"46"},{"size":969,"mtime":1618762366628,"results":"77","hashOfConfig":"46"},{"size":2057,"mtime":1618762520315,"results":"78","hashOfConfig":"46"},{"size":2350,"mtime":1617785985056,"results":"79","hashOfConfig":"46"},{"size":2369,"mtime":1617785990802,"results":"80","hashOfConfig":"46"},{"size":1578,"mtime":1618757944557,"results":"81","hashOfConfig":"46"},{"size":1858,"mtime":1616616625661,"results":"82","hashOfConfig":"46"},{"size":4698,"mtime":1618763993338,"results":"83","hashOfConfig":"46"},{"size":1587,"mtime":1616616626286,"results":"84","hashOfConfig":"46"},{"size":1134,"mtime":1618654203097,"results":"85","hashOfConfig":"46"},{"size":1383,"mtime":1618751412338,"results":"86","hashOfConfig":"46"},{"size":543,"mtime":1618751697824,"results":"87","hashOfConfig":"46"},{"size":2536,"mtime":1618755223215,"results":"88","hashOfConfig":"46"},{"size":1435,"mtime":1618756244814,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"g65n36",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\index.js",[],["191","192"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\App.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\reportWebVitals.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\ForgotPassword.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Home.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Login.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Navbar.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\AdminBoard.js",["193","194","195"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\Profile.js",["196","197"],"import {\r\n  Button, Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport React from \"react\";\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport AuthService from \"../services/auth.service\";\r\nimport ProfileListItem from \"./ProfileListItem\";\r\n\r\nfunction Profile(props) {\r\n  let match = useRouteMatch();\r\n  const currentUser = props.user ? props.user : AuthService.getCurrentUser();\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1>\r\n          <strong>{currentUser.username}'s</strong> Profile\r\n        </h1>\r\n      </header>\r\n      <List>\r\n        {/* TODO: Return for \"debugging\" */}\r\n        {/* <ProfileListItem\r\n          title=\"Token\"\r\n          value={currentUser.accessToken.substring(0, 20)}\r\n        />\r\n        <Divider />\r\n        <ProfileListItem title=\"ID\" value={currentUser.id} />\r\n        <Divider /> */} \r\n        <ProfileListItem title=\"Email\" value={currentUser.email} />\r\n        <Divider />\r\n        <ProfileListItem title=\"First Name\" value={currentUser.firstName}/>\r\n        <Divider />\r\n        <ProfileListItem title=\"Last Name\" value={currentUser.lastName}/>\r\n        <Divider />\r\n        <ProfileListItem title=\"Weight\" value={currentUser.weight}/>\r\n        <Divider />\r\n        <ProfileListItem title=\"Snatch Record\" value={currentUser.snatchRecord}/>\r\n        <Divider />\r\n        <ProfileListItem title=\"Clean&Jerk Record\" value={currentUser.cleanJerkRecord}/>\r\n        <Divider />\r\n        {/* <ListItem>\r\n          <ListItemText>\r\n            <strong>Authorities: </strong>\r\n            <ul>\r\n              {currentUser.roles &&\r\n                currentUser.roles.map((role, index) => (\r\n                  <li key={index}>{role}</li>\r\n                ))}\r\n            </ul>\r\n          </ListItemText>\r\n        </ListItem> */}\r\n        <Divider />\r\n      </List>\r\n      <Button\r\n        fullWidth={true}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<EditOutlinedIcon />}\r\n        component={Link} to={`${match.url}/editProfile`} \r\n      >\r\n        Edit Profile\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\auth.service.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\UserBoard.js",["198","199","200","201","202"],"import Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, Route, Switch } from \"react-router-dom\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserService from \"../../services/user.service\";\r\nimport EditProfile from \"../EditProfile\";\r\nimport Profile from \"../Profile\";\r\nimport UserCurrentWorkout from \"../workouts/UserCurrentWorkout\";\r\nimport UserPreviousWorkouts from \"../workouts/UserPreviousWorkouts\";\r\nimport SelectMenu from \"./SelectMenu\";\r\nimport RegularMenu from \"./RegularMenu\";\r\n\r\nfunction UserBoard() {\r\n  const currentUser = AuthService.getCurrentUser();\r\n  const menuOptions = [\r\n    {\r\n      label: \"Profile\",\r\n      link: \"/user/profile\",\r\n    },\r\n    {\r\n      label: \"Current Workout\",\r\n      link: \"/user/currentWorkout\",\r\n    },\r\n    {\r\n      label: \"Previous Workouts\",\r\n      link: \"/user/previousWorkouts\",\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <Grid container component=\"main\" direction=\"row\">\r\n      <Hidden mdUp>\r\n          <Grid item xs={12}>\r\n            <SelectMenu menuOptions={menuOptions}/>\r\n          </Grid>\r\n        </Hidden>\r\n        <Hidden smDown>\r\n          <Grid item xs={0} sm={0} md={3} component={Paper}>\r\n            <RegularMenu menuOptions={menuOptions}/>\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid item xs={12} sm={9} md={9} component={Paper}>\r\n          <Switch>\r\n            <Route exact path=\"/user/profile\">\r\n              <Profile user={currentUser}/>\r\n            </Route>\r\n            <Route exact path=\"/user/profile/editProfile\">\r\n              <EditProfile user={currentUser}/>\r\n            </Route>\r\n            <Route exact path=\"/user/currentWorkout\" component={UserCurrentWorkout}/>\r\n            <Route exact path=\"/user/previousWorkouts\" component={UserPreviousWorkouts}/>\r\n          </Switch>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserBoard;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\themes\\index.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\user.service.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\ProfileListItem.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\EditProfile.js",["203"],"import { CircularProgress, Divider} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useFormik } from \"formik\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport * as yup from \"yup\";\r\nimport AdminService from \"../services/admin.service\";\r\nimport AlertSnackbar from \"./AlertSnackbar\";\r\n\r\nconst validationSchema = yup.object({\r\n  username: yup.string(\"Enter username\").required(\"Required\"),\r\n  email: yup\r\n    .string(\"Enter email\")\r\n    .email(\"Must be a valid email address\")\r\n    .required(\"Required!\"),\r\n  firstName: yup\r\n    .string(\"Enter First Name\")\r\n    .matches(/^[A-Za-z]+$/, \"First name should only contain english letters\")\r\n    .required(\"Required\"),\r\n  lastName: yup\r\n    .string(\"Enter Last Name\")\r\n    .matches(/^[A-Za-z]+$/, \"Last name should only contain english letters\")\r\n    .required(\"Required\"),\r\n  weight: yup\r\n    .number(\"Enter current body weight\")\r\n    .positive(\"Weight can only be positive, duh\")\r\n    .integer(\"Weight should be an integer\")\r\n    .lessThan(200, \"I think we are exaggerating...\"),\r\n  snatchRecord: yup\r\n    .number(\"Enter current Snatch record\")\r\n    .positive()\r\n    .integer(\"Snatch record should be an integer\")\r\n    .lessThan(200, \"I think we are exaggerating...\"),\r\n  cleanJerkRecord: yup\r\n    .number(\"Enter current Clean&Jerk record\")\r\n    .positive()\r\n    .integer(\"Clean&Jerk record should be an integer\")\r\n    .lessThan(250, \"I think we are exaggerating...\"),\r\n});\r\n\r\nfunction EditProfile({user}) {\r\n  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false); // TODO: Use for conditional rendering\r\n  const [alertSnackbar, setAlertSnackbar] = useState({type: \"\", message: \"\"});\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: user.username || \"\",\r\n      email: user.email || \"\",\r\n      firstName: user.firstName || \"\",\r\n      lastName: user.lastName || \"\",\r\n      weight: user.weight || \"\",\r\n      snatchRecord: user.snatchRecord || \"\",\r\n      cleanJerkRecord: user.cleanJerkRecord || \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: () => {\r\n      updateProfile();\r\n    },\r\n  });\r\n\r\n  const updateProfile = useCallback(async () => {\r\n    setIsUpdatingProfile(true);\r\n    try {\r\n      const response = await AdminService.updateUserById({...formik.values, _id: user._id});\r\n      setAlertSnackbar({type: \"success\", message: response.data.message});\r\n    } catch(error) {\r\n      setAlertSnackbar({type: \"error\", message: error.response.data.message || error.toString()});\r\n    }\r\n    setIsUpdatingProfile(false);\r\n  }, [formik.values, isUpdatingProfile, user]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <h1>Edit Profile</h1>\r\n        <TextField\r\n          fullWidth\r\n          id=\"username\"\r\n          name=\"username\"\r\n          label=\"Username\"\r\n          value={formik.values.username}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.username && Boolean(formik.errors.username)}\r\n          helperText={formik.touched.username && formik.errors.username}\r\n        />\r\n        <TextField\r\n          fullWidth\r\n          id=\"email\"\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"firstName\"\r\n          name=\"firstName\"\r\n          label=\"First Name\"\r\n          value={formik.values.firstName}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.firstName && Boolean(formik.errors.firstName)\r\n          }\r\n          helperText={formik.touched.firstName && formik.errors.firstName}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"lastName\"\r\n          name=\"lastName\"\r\n          label=\"Last Name\"\r\n          value={formik.values.lastName}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.lastName && Boolean(formik.errors.lastName)\r\n          }\r\n          helperText={formik.touched.lastName && formik.errors.lastName}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"weight\"\r\n          name=\"weight\"\r\n          label=\"Weight\"\r\n          value={formik.values.weight}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.weight && Boolean(formik.errors.weight)\r\n          }\r\n          helperText={formik.touched.weight && formik.errors.weight}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"snatchRecord\"\r\n          name=\"snatchRecord\"\r\n          label=\"Snatch Record\"\r\n          value={formik.values.snatchRecord}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.snatchRecord && Boolean(formik.errors.snatchRecord)\r\n          }\r\n          helperText={formik.touched.snatchRecord && formik.errors.snatchRecord}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"cleanJerkRecord\"\r\n          name=\"cleanJerkRecord\"\r\n          label=\"Clean&Jerk Record\"\r\n          value={formik.values.cleanJerkRecord}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.cleanJerkRecord && Boolean(formik.errors.cleanJerkRecord)\r\n          }\r\n          helperText={formik.touched.cleanJerkRecord && formik.errors.cleanJerkRecord}\r\n        />\r\n        <Divider/>\r\n        {isUpdatingProfile ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            type=\"submit\"\r\n            startIcon={<SendIcon />}\r\n          >\r\n            Update Profile\r\n          </Button>\r\n        )}\r\n        <AlertSnackbar type={alertSnackbar.type} message={alertSnackbar.message}/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditProfile;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\EditUserFromParams.jsx",["204"],"import React, { useState, useEffect } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport AdminService from '../services/admin.service';\r\nimport EditProfile from './EditProfile';\r\n\r\nfunction EditUserFromParams() {\r\n    let {id} = useParams();\r\n    const [user, setUser] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    \r\n    async function getUserFromDbByParams(){\r\n        let userFromDb = await AdminService.getUserById(id);\r\n        setUser(userFromDb);\r\n        setIsLoading(false);\r\n    } \r\n\r\n    useEffect(() => {\r\n        getUserFromDbByParams();\r\n    }, [id]);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? \r\n            <h1>Loading, please wait</h1> : \r\n            <EditProfile user={user}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditUserFromParams;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\RegisterProfile.jsx",["205"],"import { CircularProgress, Divider } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useFormik } from \"formik\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport * as yup from \"yup\";\r\nimport AdminService from \"../services/admin.service\";\r\nimport AlertSnackbar from \"./AlertSnackbar\";\r\n\r\nconst validationSchema = yup.object({\r\n  username: yup.string(\"Enter username\").required(\"Required\"),\r\n  password: yup\r\n    .string(\"Enter password\")\r\n    .min(8, \"Password is too short - 8 characters atleast\")\r\n    .matches(/[a-zA-z0-9]/, \"Password should only contain latin letters or numbers\")\r\n    .required(\"Required\"),\r\n  email: yup\r\n    .string(\"Enter email\")\r\n    .email(\"Must be a valid email address\")\r\n    .required(\"Required!\"),\r\n  firstName: yup\r\n    .string(\"Enter First Name\")\r\n    .matches(/^[A-Za-z]+$/, \"First name should only contain english letters\")\r\n    .required(\"Required\"),\r\n  lastName: yup\r\n    .string(\"Enter Last Name\")\r\n    .matches(/^[A-Za-z]+$/, \"Last name should only contain english letters\")\r\n    .required(\"Required\"),\r\n  weight: yup\r\n    .number(\"Enter current body weight\")\r\n    .positive(\"Weight can only be positive, duh\")\r\n    .integer(\"Weight should be an integer\")\r\n    .lessThan(200, \"I think we are exaggerating...\"),\r\n  snatchRecord: yup\r\n    .number(\"Enter current Snatch record\")\r\n    .positive()\r\n    .integer(\"Snatch record should be an integer\")\r\n    .lessThan(200, \"I think we are exaggerating...\"),\r\n  cleanJerkRecord: yup\r\n    .number(\"Enter current Clean&Jerk record\")\r\n    .positive()\r\n    .integer(\"Clean&Jerk record should be an integer\")\r\n    .lessThan(250, \"I think we are exaggerating...\"),\r\n});\r\n\r\nfunction RegisterProfile() {\r\n  const [isRegisteringProfile, setIsRegisteringProfile] = useState(false); // TODO: Use for conditional rendering\r\n  const [alertSnackbar, setAlertSnackbar] = useState({type: \"\", message: \"\"});\r\n  \r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      password: \"\",\r\n      email: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      weight: \"\",\r\n      snatchRecord: \"\",\r\n      cleanJerkRecord: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: () => {\r\n      registerProfile();\r\n    },\r\n  });\r\n\r\n  const registerProfile = useCallback(async () => {\r\n    setIsRegisteringProfile(true);\r\n    try {\r\n      const response = await AdminService.registerNewUser({...formik.values});\r\n      formik.resetForm(); \r\n      setAlertSnackbar({type: \"success\", message: response.data.message});\r\n    } catch(error) {\r\n      setAlertSnackbar({type: \"error\", message: error.response.data.message || error.toString()});\r\n    }\r\n    setIsRegisteringProfile(false);\r\n  }, [formik, isRegisteringProfile]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <h1>Register Profile</h1>\r\n        <TextField\r\n          fullWidth\r\n          id=\"username\"\r\n          name=\"username\"\r\n          label=\"Username\"\r\n          value={formik.values.username}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.username && Boolean(formik.errors.username)}\r\n          helperText={formik.touched.username && formik.errors.username}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"email\"\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"password\"\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          value={formik.values.password}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"firstName\"\r\n          name=\"firstName\"\r\n          label=\"First Name\"\r\n          value={formik.values.firstName}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.firstName && Boolean(formik.errors.firstName)\r\n          }\r\n          helperText={formik.touched.firstName && formik.errors.firstName}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"lastName\"\r\n          name=\"lastName\"\r\n          label=\"Last Name\"\r\n          value={formik.values.lastName}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.lastName && Boolean(formik.errors.lastName)\r\n          }\r\n          helperText={formik.touched.lastName && formik.errors.lastName}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"weight\"\r\n          name=\"weight\"\r\n          label=\"Weight\"\r\n          value={formik.values.weight}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.weight && Boolean(formik.errors.weight)\r\n          }\r\n          helperText={formik.touched.weight && formik.errors.weight}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"snatchRecord\"\r\n          name=\"snatchRecord\"\r\n          label=\"Snatch Record\"\r\n          value={formik.values.snatchRecord}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.snatchRecord && Boolean(formik.errors.snatchRecord)\r\n          }\r\n          helperText={formik.touched.snatchRecord && formik.errors.snatchRecord}\r\n        />\r\n        <Divider/>\r\n        <TextField\r\n          fullWidth\r\n          id=\"cleanJerkRecord\"\r\n          name=\"cleanJerkRecord\"\r\n          label=\"Clean&Jerk Record\"\r\n          value={formik.values.cleanJerkRecord}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.cleanJerkRecord && Boolean(formik.errors.cleanJerkRecord)\r\n          }\r\n          helperText={formik.touched.cleanJerkRecord && formik.errors.cleanJerkRecord}\r\n        />\r\n        <Divider/>\r\n        {isRegisteringProfile ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            type=\"submit\"\r\n            startIcon={<SendIcon />}\r\n          >\r\n            Register Profile\r\n          </Button>\r\n        )}\r\n        <AlertSnackbar type={alertSnackbar.type} message={alertSnackbar.message}/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterProfile;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\Exercises.jsx",["206"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminWorkout.jsx",["207"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AdminService from \"../../services/admin.service\";\r\nimport WorkoutExercises from './WorkoutExercises';\r\n\r\nfunction AdminWorkout() {\r\n  let { id } = useParams();\r\n  const [workout, setWorkout] = useState();\r\n  const [dateAndTime, setDateAndTime] = useState();\r\n\r\n  const setWhen = (dateAndTime) => {\r\n    let date = new Date(Date.parse(dateAndTime));\r\n    let dateOptions = {\r\n      hour12: false,\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    };\r\n    setDateAndTime(date.toLocaleString(\"en-IL\", dateOptions));\r\n  };\r\n\r\n  const fetchWorkout = useCallback(async () => {\r\n    const workout = await AdminService.getAdminWorkoutById(id);\r\n    setWorkout(workout);\r\n    setWhen(workout.dateAndTime);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchWorkout();\r\n  }, [fetchWorkout]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>When?</h1>\r\n      <h3>{dateAndTime}</h3>\r\n      <h1>Who?</h1>\r\n      <ul>\r\n        {workout &&\r\n          workout.athletes &&\r\n          workout.athletes.map((athleteObj, index) => {\r\n            let athlete = athleteObj.athlete;\r\n            return (\r\n              <li key={athlete._id}>\r\n                <h3>\r\n                  {athlete.firstName} {athlete.lastName}\r\n                </h3>\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n      <h1>What?</h1>\r\n      <ol>\r\n        {workout && workout.exercises && <WorkoutExercises exercises={workout.exercises}/>}\r\n      </ol>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminWorkout;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\AddExercise.jsx",["208"],"import { CircularProgress } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useFormik } from \"formik\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport * as yup from \"yup\";\r\nimport AdminService from \"../../services/admin.service\";\r\nimport AlertSnackbar from \"../AlertSnackbar\";\r\n\r\nconst validationSchema = yup.object({\r\n  name: yup\r\n    .string(\"Enter the name of the exercise\")\r\n    .required(\"Name is required\"),\r\n  description: yup.string(\"Enter your password\"),\r\n});\r\n\r\nfunction AddExercise() {\r\n  const [isSubmittingNewExercise, setIsSubmittingNewExercise] = useState(false); // TODO: Use for conditional rendering\r\n  const [alertSnackbar, setAlertSnackbar] = useState({type: \"\", message: \"\"});\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: () => {\r\n      submitNewExercise();\r\n    },\r\n  });\r\n\r\n  const submitNewExercise = useCallback(async () => {\r\n    setIsSubmittingNewExercise(true);\r\n    try {\r\n      const response = await AdminService.addExercise(\r\n        formik.values.name,\r\n        formik.values.description\r\n      );\r\n      formik.resetForm();\r\n      setAlertSnackbar({type: \"success\", message: response.data.message});\r\n    } catch(error) {\r\n      setAlertSnackbar({type: \"error\", message: error.response.data.message || error.toString()});\r\n    }\r\n    setIsSubmittingNewExercise(false);\r\n  }, [formik.values, isSubmittingNewExercise]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <h1>Add New Exercise</h1>\r\n        <TextField\r\n          fullWidth\r\n          id=\"name\"\r\n          name=\"name\"\r\n          label=\"Name\"\r\n          value={formik.values.name}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.name && Boolean(formik.errors.name)}\r\n          helperText={formik.touched.name && formik.errors.name}\r\n        />\r\n        <TextField\r\n          fullWidth\r\n          id=\"description\"\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          type=\"description\"\r\n          value={formik.values.description}\r\n          onChange={formik.handleChange}\r\n          error={\r\n            formik.touched.description && Boolean(formik.errors.description)\r\n          }\r\n          helperText={formik.touched.description && formik.errors.description}\r\n        />\r\n        {isSubmittingNewExercise ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            type=\"submit\"\r\n            startIcon={<SendIcon />}\r\n          >\r\n            Submit New Exercise\r\n          </Button>\r\n        )}\r\n        <AlertSnackbar type={alertSnackbar.type} message={alertSnackbar.message}/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddExercise;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminActiveWorkouts.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkout.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\UserCurrentWorkout.jsx",["209"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport UserService from \"../../services/user.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport WorkoutExercises from './WorkoutExercises';\r\n\r\nfunction UserCurrentWorkout() {\r\n  let { id } = useParams();\r\n  const [workout, setWorkout] = useState();\r\n  const [dateAndTime, setDateAndTime] = useState();\r\n\r\n  const setWhen = (dateAndTime) => {\r\n    let date = new Date(Date.parse(dateAndTime));\r\n    let dateOptions = {\r\n      hour12: false,\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    };\r\n    setDateAndTime(date.toLocaleString(\"en-IL\", dateOptions));\r\n  };\r\n\r\n  const fetchWorkout = useCallback(async () => {\r\n    try {\r\n      const currentUser = await AuthService.getCurrentUser();\r\n      const response = await UserService.getUserCurrentWorkout(currentUser._id);\r\n      if(response.data.workout){\r\n        setWorkout(response.data.workout);\r\n        setWhen(response.datatworkout.dateAndTime);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchWorkout();\r\n  }, [fetchWorkout]);\r\n\r\n  return (\r\n    <div>\r\n      {workout ? \r\n      <div>\r\n        <h1>When?</h1>\r\n        <h3>{dateAndTime}</h3>\r\n        <h1>What?</h1>\r\n        <ol>\r\n          {workout && workout.exercises && <WorkoutExercises exercises={workout.exercises}/>}\r\n        </ol>\r\n      </div> \r\n      : <h1>There is no current workout</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserCurrentWorkout;","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\UserPreviousWorkouts.jsx",["210"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport AdminService from \"../../services/admin.service\";\r\nimport WorkoutsListItem from './WorkoutsListItem';\r\nimport UserService from \"../../services/user.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\nfunction UserPreviousWorkouts() {\r\n  const [workouts, setWorkouts] = useState();\r\n\r\n  const fetchAllPreviousWorkouts = useCallback(async () => {\r\n    try {\r\n      const currentUser = await AuthService.getCurrentUser();\r\n      const response = await UserService.getUserPreviousWorkouts(currentUser._id);\r\n      let workouts = response.data.workouts;\r\n      if(workouts.length > 0){\r\n          setWorkouts(workouts);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchAllPreviousWorkouts();\r\n  }, [fetchAllPreviousWorkouts]);\r\n\r\n  return (\r\n    <div>\r\n        {workouts ? \r\n        <h1>These are all the previous workouts</h1> \r\n    : <h1>There are no previous workouts at the time</h1>}\r\n      {workouts &&\r\n        workouts.map((workout, index) => (\r\n          <WorkoutsListItem \r\n          key={workout._id}\r\n          dateAndTime={workout.dateAndTime} \r\n          id={workout._id}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserPreviousWorkouts;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AdminPreviousWorkouts.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\auth-header.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\services\\admin.service.js",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\WorkoutExercises.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\ExercisesListItem.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\WorkoutsListItem.jsx",["211"],"import { Paper, Fab } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction WorkoutsListItem({ dateAndTime, id }) {\r\n  const [when, setWhen] = useState();\r\n  useEffect(() => {\r\n    let date = new Date(Date.parse(dateAndTime));\r\n    let dateOptions = {\r\n      hour12: false,\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    };\r\n    setWhen(date.toLocaleString(\"en-IL\", dateOptions));\r\n  });\r\n  return (\r\n    <div>\r\n      <Paper>\r\n        <h3>{when}</h3>\r\n        {/* <h5>{id}</h5> */}\r\n\r\n        <Fab color=\"secondary\" aria-label=\"edit\">\r\n          <Link to={`/admin/workout/${id}`}>\r\n            <VisibilityIcon />\r\n          </Link>\r\n        </Fab>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkoutsListItem;\r\n","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutAddAthletes.jsx",["212","213"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutDateTimePicker.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddWorkoutAddExercises.jsx",["214","215"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\EditExerciseFormDialog.jsx",["216","217","218"],"import Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, { useEffect, useState } from 'react';\r\nimport AdminService from '../../services/admin.service';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function EditExerciseFormDialog({name, description, openDialog, editDescriptionByName}) {\r\n    const history = useHistory();\r\n    const [open, setOpen] = useState(false);\r\n    const [typedValue, setTypedValue] = useState(\"\");\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setOpen(openDialog);\r\n    }, [openDialog])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleEditExercise = (name) => {\r\n        let updatedDescription = typedValue;\r\n        let response = AdminService.updateExercise(name, updatedDescription);\r\n        editDescriptionByName(name, updatedDescription);\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Edit Exercise</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText>\r\n                Enter a new, clearer description of the exercise:\r\n            </DialogContentText>\r\n            <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"description\"\r\n                defaultValue={description}\r\n                fullWidth\r\n                onChange={e => setTypedValue(e.target.value)}\r\n            />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n            </Button>\r\n            <Button \r\n                onClick={e => {handleEditExercise(name)}} \r\n                color=\"primary\"\r\n                to={\"/admin/exercises\"}>\r\n                Submit\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\exercises\\DeleteExerciseFormDialog.jsx",["219","220"],"import Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, { useEffect, useState } from 'react';\r\nimport AdminService from '../../services/admin.service';\r\n\r\nexport default function DeleteExerciseFormDialog({name, openDialog, deleteFromExercisesByName}) {\r\n    const [open, setOpen] = useState(false);\r\n    const [typedValue, setTypedValue] = useState(\"\");\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setOpen(openDialog);\r\n    }, [openDialog])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDeleteExercise = (name) => {\r\n        let response = AdminService.deleteExercise(name);\r\n        deleteFromExercisesByName(name);\r\n        setOpen(false);\r\n    }\r\n\r\n    const shouldBeDisabled = () => {\r\n        return typedValue.localeCompare(name) ? true : false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Delete Exercise</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText>\r\n                Are you <b>sure</b> you want to delete this exercise?\r\n                Type <b>{name}</b> below:\r\n            </DialogContentText>\r\n            <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Exercise name\"\r\n                fullWidth\r\n                onChange={e => setTypedValue(e.target.value)}\r\n            />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n            </Button>\r\n            <Button disabled={shouldBeDisabled()}  \r\n                onClick={e => {handleDeleteExercise(name)}} \r\n                color=\"primary\"\r\n                to={\"/admin/exercises\"}>\r\n                Delete Exercise\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\PickExerciseAndSets.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\PercentageOfExerciseSelector.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\AddSets.jsx",["221"],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\workouts\\ExerciseSelector.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\AlertSnackbar.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\SelectMenu.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\boards\\RegularMenu.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\athletes\\Athletes.jsx",[],"D:\\Nikita Ilyasov\\Programming\\boris-freikman-weightlifting\\boris-freikman-web\\src\\components\\athletes\\AthletesListItem.jsx",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":1,"column":10,"nodeType":"228","messageId":"229","endLine":1,"endColumn":16},{"ruleId":"226","severity":1,"message":"230","line":2,"column":17,"nodeType":"228","messageId":"229","endLine":2,"endColumn":25},{"ruleId":"226","severity":1,"message":"231","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":14},{"ruleId":"226","severity":1,"message":"232","line":4,"column":3,"nodeType":"228","messageId":"229","endLine":4,"endColumn":11},{"ruleId":"226","severity":1,"message":"233","line":5,"column":3,"nodeType":"228","messageId":"229","endLine":5,"endColumn":15},{"ruleId":"226","severity":1,"message":"227","line":1,"column":8,"nodeType":"228","messageId":"229","endLine":1,"endColumn":14},{"ruleId":"226","severity":1,"message":"234","line":5,"column":17,"nodeType":"228","messageId":"229","endLine":5,"endColumn":26},{"ruleId":"226","severity":1,"message":"230","line":5,"column":28,"nodeType":"228","messageId":"229","endLine":5,"endColumn":36},{"ruleId":"226","severity":1,"message":"231","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":14},{"ruleId":"226","severity":1,"message":"235","line":8,"column":8,"nodeType":"228","messageId":"229","endLine":8,"endColumn":19},{"ruleId":"236","severity":1,"message":"237","line":71,"column":6,"nodeType":"238","endLine":71,"endColumn":46,"suggestions":"239"},{"ruleId":"236","severity":1,"message":"240","line":19,"column":8,"nodeType":"238","endLine":19,"endColumn":12,"suggestions":"241"},{"ruleId":"236","severity":1,"message":"242","line":78,"column":6,"nodeType":"238","endLine":78,"endColumn":36,"suggestions":"243"},{"ruleId":"226","severity":1,"message":"244","line":1,"column":19,"nodeType":"228","messageId":"229","endLine":1,"endColumn":23},{"ruleId":"236","severity":1,"message":"245","line":28,"column":6,"nodeType":"238","endLine":28,"endColumn":8,"suggestions":"246"},{"ruleId":"236","severity":1,"message":"247","line":46,"column":6,"nodeType":"238","endLine":46,"endColumn":46,"suggestions":"248"},{"ruleId":"226","severity":1,"message":"249","line":8,"column":9,"nodeType":"228","messageId":"229","endLine":8,"endColumn":11},{"ruleId":"226","severity":1,"message":"250","line":2,"column":8,"nodeType":"228","messageId":"229","endLine":2,"endColumn":20},{"ruleId":"236","severity":1,"message":"251","line":8,"column":3,"nodeType":"228","endLine":8,"endColumn":12,"suggestions":"252"},{"ruleId":"236","severity":1,"message":"253","line":83,"column":6,"nodeType":"238","endLine":83,"endColumn":13,"suggestions":"254"},{"ruleId":"236","severity":1,"message":"255","line":87,"column":6,"nodeType":"238","endLine":87,"endColumn":8,"suggestions":"256"},{"ruleId":"226","severity":1,"message":"257","line":2,"column":17,"nodeType":"228","messageId":"229","endLine":2,"endColumn":28},{"ruleId":"226","severity":1,"message":"258","line":4,"column":10,"nodeType":"228","messageId":"229","endLine":4,"endColumn":22},{"ruleId":"226","severity":1,"message":"259","line":13,"column":11,"nodeType":"228","messageId":"229","endLine":13,"endColumn":18},{"ruleId":"226","severity":1,"message":"260","line":17,"column":11,"nodeType":"228","messageId":"229","endLine":17,"endColumn":26},{"ruleId":"226","severity":1,"message":"261","line":31,"column":13,"nodeType":"228","messageId":"229","endLine":31,"endColumn":21},{"ruleId":"226","severity":1,"message":"260","line":15,"column":11,"nodeType":"228","messageId":"229","endLine":15,"endColumn":26},{"ruleId":"226","severity":1,"message":"261","line":28,"column":13,"nodeType":"228","messageId":"229","endLine":28,"endColumn":21},{"ruleId":"226","severity":1,"message":"262","line":18,"column":11,"nodeType":"228","messageId":"229","endLine":18,"endColumn":18},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'useEffect' is defined but never used.","'UserService' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'isUpdatingProfile'. Either exclude it or remove the dependency array.","ArrayExpression",["265"],"React Hook useEffect has a missing dependency: 'getUserFromDbByParams'. Either include it or remove the dependency array.",["266"],"React Hook useCallback has an unnecessary dependency: 'isRegisteringProfile'. Either exclude it or remove the dependency array.",["267"],"'Grid' is defined but never used.","React Hook useCallback has a missing dependency: 'id'. Either include it or remove the dependency array.",["268"],"React Hook useCallback has a missing dependency: 'formik'. Either include it or remove the dependency array.",["269"],"'id' is assigned a value but never used.","'AdminService' is defined but never used.","React Hook useEffect contains a call to 'setWhen'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [dateAndTime] as a second argument to the useEffect Hook.",["270"],"React Hook useEffect has a missing dependency: 'setFieldValue'. Either include it or remove the dependency array. If 'setFieldValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["271"],"React Hook useEffect has a missing dependency: 'setFieldTouched'. Either include it or remove the dependency array. If 'setFieldTouched' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["272"],"'useCallback' is defined but never used.","'ErrorMessage' is defined but never used.","'history' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'response' is assigned a value but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"277","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},"Update the dependencies array to be: [formik.values, user]",{"range":"288","text":"289"},"Update the dependencies array to be: [getUserFromDbByParams, id]",{"range":"290","text":"291"},"Update the dependencies array to be: [formik]",{"range":"292","text":"293"},"Update the dependencies array to be: [id]",{"range":"294","text":"295"},{"range":"296","text":"293"},"Add dependencies array: [dateAndTime]",{"range":"297","text":"298"},"Update the dependencies array to be: [right, setFieldValue]",{"range":"299","text":"300"},"Update the dependencies array to be: [setFieldTouched]",{"range":"301","text":"302"},[2675,2715],"[formik.values, user]",[602,606],"[getUserFromDbByParams, id]",[2824,2854],"[formik]",[900,902],"[id]",[1578,1618],[605,605],", [dateAndTime]",[2404,2411],"[right, setFieldValue]",[2482,2484],"[setFieldTouched]"]